{% extends 'base.html.twig' %}

{% form_theme form 'partials/_profileChoice.html.twig' %}

{# use macro to customize the render of the form #}
{% import 'macros/formRender.html.twig' as fieldRender %}

{% block title %}{{ 'profile.block_title'|trans }}{% endblock %}
{% block stylesheets %}
    {{ parent() }}
    {{ encore_entry_link_tags('css/profile') }}
    {{ encore_entry_link_tags('css/datepicker/datepicker') }}
{% endblock %}

{% block body %}
    <div class="container">
        {# modal window to update avatar #}
        {% include 'partials/modals/_modalUpdateAvatar.html.twig' %}
        
        {# modal window to confirm deletion of account #}
        {% include 'partials/modals/_modalDeleteProfile.html.twig' %}
        
        <div class="d-flex justify-content-center pt-2">
            <div class="card card-profile">
                <div class="card-header card-profile-header-avatar" data-toggle="modal" data-target="#avatarProfileModal">
                    <div class="update-avatar">
                        <img src=
                            {% if user.avatar is empty %}
                                "{{ asset('img/library/defaultAvatar.png') }}"
                            {% elseif user.avatar starts with 'https:' %}
                                "{{ user.avatar }}"
                            {% else %}
                                "{{ asset('uploads/avatars/' ~ user.avatar) }}"
                            {% endif %}
                            class="avatar avatar-large img-avatar" id="imgAvatarProfile" alt="Avatar de {{ user.pseudo }}" >
                        <div class="icon-edit">
                            <div class="update-icon-avatar"><i class="far fa-edit"></i></div>
                        </div>
                        <input type="hidden" id="input-update-avatar" name="token" value="{{ csrf_token('update-avatar') }}"
                        data-ref="{{ path('update_avatar', {'id':user.id}) }}" />
                    </div>
                </div>
            </div>
        </div>

        {# profile form #}
        {{ form_start(form, {'attr': {'novalidate': 'novalidate'}}) }}
            <div class="d-flex justify-content-center pt-2">
                <div class="card card-profile mt-2">
                    <div class="card-header text-left" style="font-size: 1rem"><i class="far fa-address-card"></i>  {{ 'profile.title.general_infos'|trans }}</div>
                    <div class="card-body text-left">
                        {{ form_widget(form.gender) }}
                        {{ form_widget(form.situation) }}
                        {{ fieldRender.formFieldRender('pseudo', form.pseudo) }}
                        {{ form_row(form.firstName) }}
                        {{ form_row(form.lastName) }}
                        {{ fieldRender.formFieldRender('email', form.email) }}
                        {{ fieldRender.formDateRender('birthDate', form.birthDate) }}
                        {{ form_row(form.profession) }}
                        {{ form_row(form.company) }}
                    </div>
                </div>
            </div>
            <div class="d-flex justify-content-center pt-2">
                <div class="card mt-2 card-profile">
                    <div class="card-header text-left"><i class="fas fa-user-edit"></i>  {{ 'profile.title.description'|trans }}</div>
                    <div class="card-body text-left">
                        {{ form_widget(form.description)}}
                    </div>
                </div>
            </div>
            <div class="d-flex justify-content-center pt-2">
                <div class="card mt-2 card-profile">
                    <div class="card-header text-left"><i class="fab fa-wpexplorer"></i>  {{ 'profile.title.interests'|trans }}</div>
                    <div class="card-body text-left">
                        <h4 class="card-title">Primary card title</h4>
                        <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
                    </div>
                </div>
            </div>
            <div class="d-flex justify-content-center pt-2">
                <button type="submit" class="btn btn-profile-update btn-sm mr-2 shadow-none"><i class="far fa-edit"></i>  {{ 'profile.btn_update'|trans }}</button>
                <button type="button" id="btn-profile-delete" class="btn btn-profile-delete btn-sm shadow-none" data-toggle="modal" data-target="#deleteProfileModal">
                    <i class="far fa-trash-alt"></i>  {{ 'profile.btn_delete'|trans }}
                </button>
            </div>
        {{ form_end(form) }}
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    {{ encore_entry_script_tags('js/datepicker/datepicker') }}
    {% if app.request.locale == 'fr' %}
        {{ encore_entry_script_tags('js/datepicker/datepicker-fr') }}
    {% endif %}
    {# management of datepicker options #}
    {% include 'partials/_datepickerManagement.html.twig' %}
    
    <script>
        
        btnCancel = false // cancel button of modal avatar management

        // load modal image when modal window is opened
        $('#avatarProfileModal').on('show.bs.modal', function () {
            document.getElementById('imgModalAvatar').setAttribute('src', document.getElementById('imgAvatarProfile').getAttribute('src'))
        })

        document.getElementById('btnCancelAvatar').addEventListener('click', function() {
            btnCancel = true
        })
        
        const fileInput = document.getElementById("uploadFile")

        document.getElementById('btnDelAvatar').addEventListener('click', function() {
            // if delete image, replace it by default avatar image
            document.getElementById("imgModalAvatar").setAttribute('src', "{{ asset('img/library/defaultAvatar.png') }}")
            fileInput.value=""
        })
        
        // if click on change button
        document.getElementById("btnChangeAvatar").addEventListener("click", function() {
            fileInput.click()
        })

         // *** manage upload new file *** 
        fileInput.addEventListener("change", function(e) {
            // if file choose
            fileAvatar = this.files[0];
            if (fileAvatar) {
                const reader = new FileReader();
                reader.addEventListener("load", function() {
                    document.getElementById("imgModalAvatar").setAttribute('src', this.result)
                })
                reader.readAsDataURL(fileAvatar)
            }
        })
        $('#avatarProfileModal').on('hide.bs.modal', function () {
            if (!btnCancel) { // if not cancel button
            // if image change 
                let imgModalAvatar = document.getElementById("imgModalAvatar").getAttribute('src')
                if (document.getElementById("imgAvatarProfile").getAttribute('src') != imgModalAvatar)
                {
                    let inputUpdateAvatar = document.getElementById("input-update-avatar") // token
                    let form = new FormData();
                    form.append('token', inputUpdateAvatar.value)
                    
                    // if avatar deleted
                    if (fileInput.value === '') {
                        form.append('image', '{{ user.avatar }}')
                        form.append('action', 'delete')
                    }
                    // else change with new image
                    else {
                        form.append('image', fileAvatar)
                        form.append('action', 'update')
                    }
                    // Send new image by json to update - name of file = fileAvatar['name']
                    fetch(inputUpdateAvatar.getAttribute("data-ref"), {
                        method: 'POST',
                        headers: {
                            "X-Request-With": "XMLHttpRequest",
                            "enctype": "multipart/form-data",
                        },
                            body: form
                    })
                    .then(function(response) {
                        // retrieve the response in json
                        return response.json()
                    })
                    .then (data => {
                        if(!data.success) {
                            toastMsg("error", data.error,"4000")
                        }
                        else {
                            if (fileInput.value === '') {
                                document.getElementById("imgAvatarProfile").setAttribute('src', "{{ asset('img/library/defaultAvatar.png') }}")
                                document.getElementById("imgAvatarNav").setAttribute('src', "{{ asset('img/library/defaultAvatar.png') }}")
                            }
                            else {
                                // Replace image of avatar in profile form
                                document.getElementById("imgAvatarProfile").setAttribute('src', imgModalAvatar)
                                document.getElementById("imgAvatarNav").setAttribute('src', imgModalAvatar)
                            }
                        }
                    })
                    .catch(e => toastMsg("error", "Une erreur est survenue lors de la modification de l'image. Merci de réessayer ultérieurement","4000"))
                }
            }
            else {
                btnCancel = false
            }
        })

        $('#deleteProfileModal').on('hidden.bs.modal', function () {
            $('#btn-profile-delete').focus(function() {
                // position at top of the page
               $('html,body').animate({scrollTop: 0}, 200)
            })
        })
        // *** end manage upload new file ***
        
        // Display error message by toastr
        function toastMsg(criticity, message, timeout) {
            toastr.options = {
                "closeButton": true,
                "debug": false,
                "newestOnTop": false,
                "progressBar": true,
                "positionClass": "toast-top-left",
                "preventDuplicates": false,
                "onclick": null,
                "showDuration": "300",
                "hideDuration": "1000",
                "timeOut": timeout,
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "slideUp",
                'escapeHtml': true
            }
            toastr[criticity](message)
        }
    </script>
{% endblock %}