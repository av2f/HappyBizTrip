{% extends 'base.html.twig' %}

{% form_theme form 'partials/_profileChoice.html.twig' %}

{# use macro to customize the render of the form #}
{% import 'macros/formRender.html.twig' as fieldRender %}

{% block title %}{{ 'profile.block_title'|trans|raw }}{% endblock %}
{% block stylesheets %}
    {{ parent() }}
    {{ encore_entry_link_tags('css/profile') }}
    {{ encore_entry_link_tags('css/datepicker/datepicker') }}
{% endblock %}

{% block body %}
    <div class="container">
        {# modal window to update avatar #}
        {% include 'partials/modals/_modalUpdateAvatar.html.twig' %}
        
        {# modal window to confirm deletion of account #}
        {% include 'partials/modals/_modalDeleteProfile.html.twig' %}

        <div class="d-flex justify-content-center pt-2">
            <div class="card card-profile">
                <div class="card-header card-profile-header-avatar" data-toggle="modal" data-target="#avatarProfileModal">
                    <div class="update-avatar">
                        <img src=
                            {% if user.avatar is empty %}
                                "{{ asset('img/library/defaultAvatar.png') }}"
                            {% elseif user.avatar starts with 'https:' %}
                                "{{ user.avatar }}"
                            {% else %}
                                "{{ asset('uploads/avatars/' ~ user.avatar) }}"
                            {% endif %}
                            class="avatar avatar-large img-avatar" id="imgAvatarProfile" alt="{{ 'alt.avatar'|trans|raw }} {{ user.pseudo }}" >
                        <div class="icon-edit">
                            <div class="update-icon-avatar"><i class="far fa-edit"></i></div>
                        </div>
                        <input type="hidden" id="input-update-avatar" name="token" value="{{ csrf_token('update-avatar') }}"
                        data-ref="{{ path('update_avatar', {'id':user.id}) }}" />
                    </div>
                </div>
            </div>
        </div>

        {# profile form #}
        {{ form_start(form, {'attr': {'novalidate': 'novalidate'}}) }}
            <div class="d-flex justify-content-center pt-2">
                <div class="card card-profile mt-2">
                    <div class="card-header text-left" style="font-size: 1rem"><i class="far fa-address-card"></i>  {{ 'profile.title.general_infos'|trans|raw }}</div>
                    <div class="card-body text-left">
                        {{ form_widget(form.gender) }}
                        {{ form_widget(form.situation) }}
                        {{ fieldRender.formFieldRender('pseudo', form.pseudo, 'profile') }}
                        {{ form_row(form.firstName) }}
                        {{ form_row(form.lastName) }}
                        {{ fieldRender.formFieldRender('email', form.email, 'profile') }}
                        {{ fieldRender.formDateRender('birthDate', form.birthDate, 'profile') }}
                        {{ form_row(form.phoneNumber) }}
                        {{ form_row(form.profession) }}
                        {{ form_row(form.company) }}
                    </div>
                </div>
            </div>
            <div class="d-flex justify-content-center pt-2">
                <div class="card mt-2 card-profile">
                    <div class="card-header text-left"><i class="fas fa-user-edit"></i>  {{ 'profile.title.description'|trans|raw }}</div>
                    <div class="card-body text-left">
                        {{ form_widget(form.description)}}
                    </div>
                </div>
            </div>
            <div class="d-flex justify-content-center pt-2">
                <div class="card mt-2 card-profile">
                    <div class="card-header text-left"><i class="fab fa-wpexplorer"></i>  {{ 'profile.title.interests'|trans|raw }}</div>
                    <div class="card-body text-center">
                        {% include 'partials/_profileInterests.html.twig' %}
                    </div>
                </div>
                {{ form_widget(form.listInterest) }}
            </div>
            <div class="d-flex justify-content-center pt-2 mt-2">
                <button type="submit" class="btn btn-profile-update btn-sm mr-2 shadow-none"><i class="far fa-edit"></i>  {{ 'profile.btn_update'|trans|raw }}</button>
                <button type="button" id="btn-profile-delete" class="btn btn-profile-delete btn-sm shadow-none" data-toggle="modal" data-target="#deleteProfileModal">
                    <i class="far fa-trash-alt"></i>  {{ 'profile.btn_delete'|trans|raw }}
                </button>
            </div>
        {{ form_end(form) }}
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    {{ encore_entry_script_tags('js/datepicker/datepicker') }}
    {% if app.request.locale == 'fr' %}
        {{ encore_entry_script_tags('js/datepicker/datepicker-fr') }}
    {% endif %}
    {# management of datepicker options #}
    {% include 'partials/_datepickerManagement.html.twig' %}
    <script>
         // ***** manage interest choices *****
        
        // initialize value of profile_listInterest
        window.addEventListener("load", (event) => {
            // var listInterest = document.getElementById("profile_listInterest").value
            var arrayListInterest = []
            document.querySelectorAll(".control-interest").forEach(interest => {
                if (interest.checked) {
                    var strInterest = interest.getAttribute("id")
                    var interestId = strInterest.substring(strInterest.indexOf("_",1) +  1, strInterest.length)
                    arrayListInterest.push(interestId)
                }
            })
            document.getElementById("profile_listInterest").value = arrayListInterest.join(";")
        })
        
        // retrieve all interests and listen on click
        document.querySelectorAll(".control-interest").forEach(interest => 
            interest.addEventListener("click", () => { 
            var listInterest = document.getElementById("profile_listInterest").value
            // retrieve the id of interest
            var strInterest = interest.getAttribute("id")
            var interestId = strInterest.substring(strInterest.indexOf("_",1) + 1, strInterest.length)
            // action following checked or not
            if (interest.checked /*&& listInterest.indexOf(interestId) == -1*/) { // if checked
                listInterest = updateListInterest(listInterest, interestId, "A")
            }
            else {
                listInterest = updateListInterest(listInterest, interestId, "R")
            }
            document.getElementById("profile_listInterest").value = listInterest
        }))
        // ***** end of manage interest choices *****
        
         // ***** Management of avatar modal window **********
        btnCancel = false // cancel button of modal avatar management

        // load modal image when modal window is opened
        $("#avatarProfileModal").on("show.bs.modal", function () {
            document.getElementById("imgModalAvatar").setAttribute("src", document.getElementById("imgAvatarProfile").getAttribute("src"))
        })

        document.getElementById("btnCancelAvatar").addEventListener("click", function() {
            btnCancel = true
        })
        
        const fileInput = document.getElementById("uploadFile")

        document.getElementById("btnDelAvatar").addEventListener("click", function() {
            // if delete image, replace it by default avatar image
            document.getElementById("imgModalAvatar").setAttribute("src", "{{ asset('img/library/defaultAvatar.png') }}")
            fileInput.value=""
        })
        
        // if click on change button
        document.getElementById("btnChangeAvatar").addEventListener("click", function() {
            fileInput.click()
        })

         // *** manage upload new file *** 
        fileInput.addEventListener("change", function(e) {
            // if file choose
            fileAvatar = this.files[0]
            if (fileAvatar) {
                const reader = new FileReader();
                reader.addEventListener("load", function() {
                    document.getElementById("imgModalAvatar").setAttribute("src", this.result)
                })
                reader.readAsDataURL(fileAvatar)
            }
        })
        $("#avatarProfileModal").on("hide.bs.modal", function (e) {
            if (!btnCancel) { // if not cancel button
                // if image change
                let imgModalAvatar = document.getElementById("imgModalAvatar").getAttribute("src")
                if (document.getElementById("imgAvatarProfile").getAttribute("src") != imgModalAvatar)
                {
                    {% set MAX_FILE_SIZE = "3Mb" %}
                    
                    let inputUpdateAvatar = document.getElementById("input-update-avatar") // token
                    let form = new FormData();
                    form.append("token", inputUpdateAvatar.value)
                    
                    // if avatar deleted
                    if (fileInput.value === "") {
                        form.append("image", "{{ user.avatar }}")
                        form.append("action", "delete")
                    }
                    // else change with new image
                    else {
                        form.append("image", fileAvatar)
                        form.append("action", "update")
                    }
                    // Send new image by json to update - name of file = fileAvatar['name']
                    fetch(inputUpdateAvatar.getAttribute("data-ref"), {
                        method: "POST",
                        headers: {
                            "X-Request-With": "XMLHttpRequest",
                            "enctype": "multipart/form-data",
                        },
                            body: form
                    })
                    .then(function(response) {
                        // retrieve the response in json
                        return response.json()
                    })
                    .then (data => {
                        if(!data.success) {
                            switch(data.error) {
                                case "2":
                                    msgError = "{{ 'update.avatar.msg.error_2'|trans|raw }}"
                                    break
                                case "3":
                                    msgError = "{{ 'update.avatar.msg.error_3'|trans|raw }}"
                                    break
                                case "4":
                                    msgError = "{{ 'update.avatar.msg.error_4'|trans({ '%maxFileSize%': MAX_FILE_SIZE })|raw }}"
                                    break
                                default:
                                    msgError = "{{ 'update.avatar.msg.error_2'|trans|raw }}"
                                    break
                            }
                            toastMsg("error", msgError,"4000")
                        }
                        else {
                            // success
                            if (fileInput.value === "") {
                                document.getElementById("imgAvatarProfile").setAttribute("src", "{{ asset('img/library/defaultAvatar.png') }}")
                                document.getElementById("imgAvatarNav").setAttribute("src", "{{ asset('img/library/defaultAvatar.png') }}")
                            }
                            else {
                                // Replace image of avatar in profile form
                                document.getElementById("imgAvatarProfile").setAttribute("src", imgModalAvatar)
                                document.getElementById("imgAvatarNav").setAttribute("src", imgModalAvatar)
                            }
                        }
                    })
                    .catch(e => toastMsg("error", "{{ 'update.avatar.msg.error_2'|trans|raw }}","4000"))
                }
            }
            else {
                btnCancel = false
            }
        })
         // ***** end of management of avatar modal window **********

        $('#deleteProfileModal').on("hidden.bs.modal", function () {
            $("#btn-profile-delete").focus(function() {
                // position at top of the page
               $("html,body").animate({scrollTop: 0}, 300)
            })
        })
        // *** end manage upload new file ***
        
        // Display error message by toastr
        function toastMsg(criticity, message, timeout) {
            toastr.options = {
                "closeButton": true,
                "debug": false,
                "newestOnTop": false,
                "progressBar": true,
                "positionClass": "toast-top-left",
                "preventDuplicates": false,
                "onclick": null,
                "showDuration": "300",
                "hideDuration": "1000",
                "timeOut": timeout,
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "slideUp",
                'escapeHtml': true
            }
            toastr[criticity](message)
        }

        function updateListInterest(listInterest, idToSearch, action) {
            /*  update the list of interest checked
            if action = R, remove the id from the list
            if action = A, add the if in the list
            
            arrayListInterest : list of id cheched in an array
            idToSearch : id to add or delete
            action : R=Remove, A=Add 

            return the list updated
            Author : Frederic Parmentier
            */
            var arrayListInterest = []
            if (listInterest.length > 0) {
                arrayListInterest = listInterest.split(";")
                var fund = false
                var ind = -1
                while (!fund && ind < arrayListInterest.length) {
                    ind++
                    if (arrayListInterest[ind] === idToSearch) {
                        arrayListInterest.splice(ind,1)
                        fund = true
                    }
                }
            }
            if (action === "A") { // add element
                arrayListInterest.push(idToSearch)
            }
            if (arrayListInterest.length === 1 && action === "A") {
                return idToSearch
            }
            else {
                return arrayListInterest.join(";")
            }
        }
    </script>
{% endblock %}