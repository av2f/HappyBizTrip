<script>
  // position of footer for screen >=768 px
  $(function () {
    if ($(window).width() >= 768) {
      var bht = $('body').height()
      var wht = $(window).height()
      if (bht < wht) {
        $('footer').css('position', 'absolute')
      }
    }
  })

  // manage connect button
  document.querySelectorAll('.btn-action').forEach(action => 
    action.addEventListener('click', (e) => { 
      e.preventDefault()
      var clickAction = action.getAttribute('id').substring(0,2)
      var badgeId = 'B_' + action.getAttribute('id').substring(action.getAttribute('id').indexOf('_', 1) + 1, action.getAttribute('id').length)
      console.log(clickAction)
      console.log(badgeId)
      // manage action on click
      switch (clickAction) {
        case 'CO':  // click on connect button
          sendJsonRequest(action.getAttribute('href'), action.dataset.token, 'CO')
          .then(response => {
            if (response.success) {
              // display badge
              badge(badgeId, 'none', 'inline',"{{ 'connection.requested'|trans|raw }}")
              // change type and string of action for button
              var newId = action.getAttribute('id').replace('CO', 'CA')
              action.setAttribute('id', newId)
              action.innerHTML = "{{ 'generic.cancel'|trans|raw }}"
            }
            else {
              console.log('foireux')
            }
          })
          .catch(e => alert(e))
          break
        case 'CA':  // Cancel
          sendJsonRequest(action.getAttribute('href'), action.dataset.token, 'CA')
          .then(response => {
            if (response.success) {
              // reset & hide badge
              badge(badgeId, 'inline', 'none', '')
              // change type and string of action for button
              var newId = action.getAttribute('id').replace('CA', 'CO')
              action.setAttribute('id', newId)
              action.innerHTML = "{{ 'generic.connect'|trans|raw }}"
            }
            else {
              console.log('foireux')
            }
          })
          .catch(e => alert(e))
          break
        case "AC":  // Accept
          sendJsonRequest(action.getAttribute('href'), action.dataset.token, 'AC')
          .then(response => {
            if (response.success) {
              // reset & hide badge
              badge(badgeId, 'inline', 'none', '')
              // change type and string of action for button
              var newId = action.getAttribute('id').replace('AC', 'ME')
              action.setAttribute('id', newId)
              action.innerHTML = "{{ 'generic.message'|trans|raw }}"
            }
            else {
              console.log('foireux')
            }
          })
          .catch(e => alert(e))
          break

        default:
          break
      }
      
    })
  )

  /* 
  Manage json request with promise
  href  : url to send request
  theToken  : token
  action  :
    CO = Connect
    CA = Cancel
    AC = Accept
  */

  function sendJsonRequest(href, theToken, action)
  {
    return fetch(href, {
      method: 'POST',
      headers: {
        'X-Requested-With': 'XMLHttpRequest',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({'_token': theToken, 'action': action})
    })
    .then( response => response.json() )
    .then(data => { return data })
  }

  /*
  Display or hide the badge
  badgeId : id of the badge to change state
  displayScr  : value of original style display
  displayDest : value of style display after change
  textBadge : Text for badge
  */
  function badge(badgeId, displaySrc, displayDest, textBadge)
  {
    if (document.getElementById(badgeId).style.display === displaySrc) {
      document.getElementById(badgeId).innerHTML = textBadge
      document.getElementById(badgeId).style.display = displayDest
    }
  }

</script>
