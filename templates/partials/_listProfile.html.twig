{# use macro to display action buttons and badge #}
{% import 'macros/mListProfile.html.twig' as mListPro %}

{% if paginator|length >0 %}
    <div class="d-flex justify-content-center pt-2">
        <div class="card">
            <div class="card-body">
                {% for result in paginator %}
                    {# Set variables #}
                    {% set flag_requester = false %}
                    {% set flag_requested = false %}
                    {% set flag_connected = false %}
                    {% set flag_has_blacklisted = false %}
                    {% set flag_blacklisted = false %}
                    {# ---- #}  
                    <div class="row mb-3 mt-3">
                        <div class="col-7 col-md-8">
                            <div class="media position-relative">
                                <img src=
                                    {% if result.avatar is empty %}
                                        "{{ asset('img/library/defaultAvatar.png') }}"
                                    {% elseif result.avatar starts with 'https:' %}
                                        "{{ result.avatar }}"
                                    {% else %}
                                        "{{ asset('/uploads/avatars/' ~ result.avatar) }}"
                                    {% endif %}
                                class="avatar avatar-media mr-3 my-auto" alt="{{ 'alt.avatar'|trans|raw }} {{ result.pseudo }}">
                                <div class="media-body">
                                    <p class="col-text-pseudo mt-0">{{result.pseudo }}
                                        {# Badge Management #}
                                        {% if result.id == user_id %}
                                            {{ mListPro.badge(result.id, 'inline', 'generic.you'|trans|raw) }}
                                        {% else %}
                                            {# verify if user is a requester to be new friend #}
                                            {% if new_requester is defined %}
                                                {% for requester in new_requester %}
                                                    {% if requester.u_id == result.id %}
                                                        {{ mListPro.badge(result.id, 'inline', 'requested.you'|trans|raw) }}
                                                        {% set flag_requester = true %}
                                                    {% endif %}
                                                {% endfor %}
                                            {% endif %}
                                            {# verify if user has been resquested to be new friend #}
                                            {% if not flag_requester and new_requested is defined %}
                                                {% for requested in new_requested %}
                                                    {% if requested.u_id == result.id %}
                                                        {{ mListPro.badge(result.id, 'inline', 'connection.requested'|trans|raw ) }}
                                                        {% set flag_requested = true %}
                                                    {% endif %}
                                                {% endfor %}
                                            {% endif %}
                                            {% if not flag_requester and not flag_requested %}
                                                {{ mListPro.badge(result.id, 'none', '') }}
                                            {% endif %}
                                        {% endif %}
                                        {# End Badge management #}
                                    </p>
                                    {% if result.firstName is not empty %}
                                        <p class="col-text-profile">{{ result.firstName }}  {{ result.lastName }}</p>
                                    {% endif %}
                                    {% if result.profession is not empty %}
                                        <p class="col-text-profile">{{ result.profession }}
                                            {% if result.company is not empty %} {{ 'generic.at'|trans|raw }} {{ result.company }} {% endif %}
                                        </p>
                                    {% endif %}
                                    <p class="col-text-profile">Grenoble, France</p>
                                    <a href="{{ path('show_profile', {'slug':result.slug}) }}" class="stretched-link"></a>
                                </div>
                            </div>
                        </div>
                        {# Management of button #}
                        <div class="col-5 col-md-4 text-right my-auto">
                            {% if list == 'F' %} {# if show friends #}
                                {{ mListPro.btn_action(result.id, 'inline', 'ME', '#', 'generic.message'|trans|raw) }}
                                {{ mListPro.btn_group(result.id, 'inline', result.pseudo, 'DE') }}
                            {% elseif list == 'R' %} {# if show solicitations #}
                                {{ mListPro.btn_action(result.id, 'inline', 'AC', path('request_action', {'id': result.id}), 'generic.accept'|trans|raw) }}
                                {{ mListPro.btn_group(result.id, 'inline', result.pseudo, 'RE') }}
                            {% elseif result.id != user_id %}
                                {% if flag_requested %} {# if user has requested for a connection #}
                                    {{ mListPro.btn_action(result.id, 'inline', 'CA', path('request_action', {'id': result.id}), 'generic.cancel'|trans|raw) }}
                                    {{ mListPro.btn_group(result.id, 'none', result.pseudo, '') }}
                                {% elseif flag_requester %} {# if user has been requested for a connection #}
                                    {{ mListPro.btn_action(result.id, 'inline', 'AC', path('request_action', {'id': result.id}), 'generic.accept'|trans|raw) }}
                                    {{ mListPro.btn_group(result.id, 'inline', result.pseudo, 'RE') }}
                                {% else %}
                                    {% for friend in friends %}
                                        {% if friend.u_id == result.id %}  {# if already friend #}
                                            {{ mListPro.btn_action(result.id, 'inline', 'ME', '#', 'generic.message'|trans|raw) }}
                                            {{ mListPro.btn_group(result.id, 'inline', result.pseudo, 'DE') }}
                                            {% set flag_connected = true %}
                                        {% endif %}
                                    {% endfor %}
                                    {% if not flag_connected %}
                                        {# verify if user has been backlisted #}
                                        {% if has_blacklisted is defined %}
                                            {% for has_blacklist in has_blacklisted %}
                                                {% if result.id == has_blacklist.requested.id %}
                                                    {{ mListPro.btn_action(result.id, 'inline', 'UN', path('request_action', {'id': result.id}), 'generic.unblock'|trans|raw) }}
                                                    {{ mListPro.btn_group(result.id, 'none', result.pseudo, '') }}
                                                    {% set flag_has_blacklisted = true %}
                                                {% endif %}
                                            {% endfor %}
                                        {% endif %}
                                        {# Verify if user has blacklisted user connected #}
                                        {% if not flag_has_blacklisted and blacklisted is defined %}
                                            {% for blacklist in blacklisted %}
                                                {% if result.id == blacklist.requester.id %}
                                                    {{ mListPro.btn_action(result.id, 'none', '', '#', '' )}}
                                                    {{ mListPro.btn_group(result.id, 'none', result.pseudo, '') }}
                                                    {% set flag_blacklisted = true %}
                                                {% endif %}
                                            {% endfor %}
                                        {% endif %}
                                    {% endif %}
                                {% endif %}
                                {# if no request and no relationship and no blacklist state #}
                                {% if not flag_requested and not flag_requester and not flag_connected and not flag_has_blacklisted and not flag_blacklisted %}
                                    {{ mListPro.btn_action(result.id, 'inline', 'CO', path('request_action', {'id': result.id}), 'generic.connect'|trans|raw) }}
                                    {{ mListPro.btn_group(result.id, 'none', result.pseudo, '') }}
                                {% endif %}
                            {% endif %}
                        </div>
                        {# End of management of buttons #}
                    </div>
                    {% if not loop.last %}<hr>{% endif %}
                {% endfor %}
            </div>
            {% if list == 'S' %}
                {# for search list #}
                {% include 'partials/_searchPagination.html.twig' %} 
            {% else %}
                {% include 'partials/_listPagination.html.twig' %}
            {% endif %}
        </div>
    </div>
{% endif %}

{# input to transfer button text and url to javascript #}
<input type="hidden" id="btnText"
    data-connect="{{ 'generic.connect'|trans|raw }}"
    data-cancel="{{ 'generic.cancel'|trans|raw }}"
    data-message="{{ 'generic.message'|trans|raw }}"
    data-unblock="{{ 'generic.unblock'|trans|raw }}"
    data-url= "{{ path('request_action', {'id': 'resultId'}) }}">
{# input to transfer badge text to javascript #}
<input type="hidden" id="badgeText" data-connection="{{ 'connection.requested'|trans|raw }}">
{# input to transfer dropdown item text to javascript #}
<input type="hidden" id="dropItemText" data-delrelation="{{ 'delete.relation'|trans|raw }}">